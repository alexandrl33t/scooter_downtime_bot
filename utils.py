import re
from datetime import datetime, timedelta

from config import logger
from database import Database


def insert_chat(chat_id, chat_name, message_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)"""
    db = Database()  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ë–î

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç
    existing_chat = db.fetchone("SELECT id FROM chats WHERE id = ?", (chat_id,))
    existing_message_id = db.fetchone("SELECT id FROM message WHERE id = ?", (message_id,))
    if existing_chat and existing_message_id:
        return
    if not existing_chat:
        db.execute("INSERT OR IGNORE INTO chats (id, name) VALUES (?, ?)", (chat_id, chat_name))
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç —Å ID: {chat_id}")
    if not existing_message_id:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        db.execute(
            "INSERT OR IGNORE INTO message (id, chat_id, last_update) VALUES (?, ?, datetime('now'))",
            (message_id, chat_id),
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}")


def parse_parking_data(text):
    parking_data = {}

    # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∫–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∞–º–æ–∫–∞—Ç–æ–≤
    pattern = re.compile(r"(üÖøÔ∏è[\süåûüåöüõ¥]+)([\w\s\d.,-]+?)\s*-\s*(\d+)")

    matches = pattern.findall(text)
    for prefix, name, count in matches:
        full_name = f"{prefix.strip()} {name.strip()}"
        parking_data[full_name] = int(count)

    return parking_data


def insert_parking_data(message_id, parking_data):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã parking –∏ history –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö –∏ —Å–∞–º–æ–∫–∞—Ç–∞—Ö."""
    db = Database()
    for name, scooter_count in parking_data.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∫–æ–≤–∫–∞ –≤ –±–∞–∑–µ
        if not db.fetchone("SELECT id FROM parking WHERE name = ? AND message_id = ?", (name, message_id)):
            db.execute(
                "INSERT OR IGNORE INTO parking (name, message_id) VALUES (?, ?)",
                (name, message_id)
            )

        parking_id = db.fetchone("SELECT id FROM parking WHERE name = ? AND message_id = ?", (name, message_id))
        parking_id = parking_id[0]
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.execute(
            "INSERT INTO history (parking_id, scooter_count, time_update) VALUES (?, ?, ?)",
            (parking_id, scooter_count, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )


def get_downtime(chat_id):
    db = Database()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ chat_id
    chat = db.fetchone("SELECT name FROM chats WHERE id = ?", (chat_id,))
    if not chat:
        return {}  # –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

    chat_name = chat[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ message_id, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º chat_id
    message = db.fetchone("SELECT id FROM message WHERE chat_id = ?", (chat_id,))
    if not message:
        return {chat_name: {}}  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, —Ç–æ –∏ –ø–∞—Ä–∫–æ–≤–æ–∫ –Ω–µ—Ç

    message_id = message[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º message_id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∫–æ–≤–æ–∫, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —ç—Ç–æ–º—É message_id
    parkings = db.fetchall("SELECT id, name FROM parking WHERE message_id = ?", (message_id,))
    if not parkings:
        return {chat_name: {}}  # –ï—Å–ª–∏ –ø–∞—Ä–∫–æ–≤–æ–∫ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

    downtime_result = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–µ–≤

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    today = datetime.now().strftime("%Y-%m-%d")

    for parking_id, parking_name in parkings:
        downtime_minutes = 0
        # 5Ô∏è‚É£ –î–æ—Å—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∞–º–æ–∫–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–∫–æ–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        history = db.fetchall("""
            SELECT scooter_count, time_update 
            FROM history 
            WHERE parking_id = ? AND DATE(time_update) = ? 
            ORDER BY time_update ASC
        """, (parking_id, today))

        if not history:
            downtime_result[parking_name] = int(downtime_minutes)
            continue

        for i in range(len(history) - 1):
            if history[i][0] == 0:  # –µ—Å–ª–∏ —Å–∫—É—Ç–µ—Ä–æ–≤ 0 –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å—á–∏—Ç–∞—Ç—å –º–∏–Ω—É—Ç—ã –æ—Ç —ç—Ç–æ–π –¥–∞—Ç—ã
                first_time_obj = datetime.strptime(history[i][1], "%Y-%m-%d %H:%M:%S")
                next_time_obj = datetime.strptime(history[i + 1][1], "%Y-%m-%d %H:%M:%S")
                downtime_minutes += (next_time_obj - first_time_obj).total_seconds() // 60

        downtime_result[parking_name] = int(downtime_minutes)

    return {chat_name: downtime_result}


def clean_old_history():
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ history, —É –∫–æ—Ç–æ—Ä—ã—Ö time_update —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π"""
    db = Database()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É, —Å—Ç–∞—Ä—à–µ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª—è—Ç—å
    week_ago = datetime.now() - timedelta(days=7)
    week_ago_str = week_ago.strftime("%Y-%m-%d %H:%M:%S")

    query = "DELETE FROM history WHERE time_update < ?"
    db.execute(query, (week_ago_str,))

    print(f"–£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏–∑ history —Å—Ç–∞—Ä—à–µ {week_ago_str}")
